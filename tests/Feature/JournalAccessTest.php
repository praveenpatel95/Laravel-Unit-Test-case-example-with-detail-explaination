<?php

namespace Tests\Feature;

use App\Models\Journal;
use App\Models\JournalAccessUser;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\AuthAccess;
use Tests\TestCase;

class JournalAccessTest extends TestCase
{
    use AuthAccess;
    /**
     * A basic feature test example.
     *
     * @return void
     */
    protected $journalId;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->journalId;
    }

    public function test_new_journal_access_user_created()
    {

        $journal = Journal::factory()->create();
        $data = [
            'journal_id' => $journal->id,
            'name' => fake()->name,
            'email' => fake()->unique()->safeEmail(),
            'password' => '123456',
            'password_confirmation' => '123456',
        ];
        $response = $this->withHeaders($this->accessHeader())
            ->post('/api/journal/access', $data);

        $response->assertStatus(200);
    }

    public function test_get_all_journal_access_user_list(){
        $response = $this->withHeaders($this->accessHeader())->get('/api/journal/access')
            ->assertSuccessful();
        //->assertStatus(200);
    }

    public function test_delete_journal_access(){

        $journalAccess = JournalAccessUser::factory()->create();
        $this->withHeaders($this->accessHeader())->delete('/api/journal/access/'.$journalAccess->id)
            ->assertSuccessful();
        //->assertStatus(200);

    }

    public function test_new_journal_access_user_not_created_without_login()
    {

        $journal = Journal::factory()->create();
        $data = [
            'journal_id' => $journal->id,
            'name' => fake()->name,
            'email' => fake()->unique()->safeEmail(),
            'password' => '123456',
            'password_confirmation' => '123456',
        ];
        $response = $this->withHeaders($this->accessHeaderWithoutLogin())
            ->post('/api/journal/access', $data);

        $response->assertStatus(401);
    }
}
